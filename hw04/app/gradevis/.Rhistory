get_maximum <- function(x, na.rm = FALSE) {
if (!is.numeric(x)) {
stop("non-numeric argument")
}
sortX <- sort(x)
return(sortX[length(sortX)]
}
a <- c(1, 4, 7, NA, 10)
get_maximum(a, na.rm = TRUE)
get_maximum <- function(x, na.rm = FALSE) {
if (!is.numeric(x)) {
stop("non-numeric argument")
}
sortX <- sort(x)
return(sortX[length(sortX)]
}
get_maximum <- function(x, na.rm = FALSE) {
if (!is.numeric(x)) {
stop("non-numeric argument")
}
sortX <- sort(x)
return(sortX[length(sortX)])
}
a <- c(1, 4, 7, NA, 10)
get_maximum(a, na.rm = TRUE)
remove_missing <- function(x){
for(i in 1:length(x)){
if(!is.na(x[i])){
z<- (x[i])
}
}
}
z
a <- c(1, 4, 7, NA, 10)
remove_missing(a) # how to make answer as a vector
# Function remove_missing()
remove_missing <- function(x){
for(i in 1:length(x)){
if(!is.na(x[i])){
z <- (x[i])
b <- sapply(z)
print b
}
}
}
remove_missing <- function(x){
for(i in 1:length(x)){
if(!is.na(x[i])){
z <- (x[i])
b <- sapply(z)
print (b)
}
}
}
a <- c(1, 4, 7, NA, 10)
remove_missing(a) # how to make answer as a vector
remove_missing <- function(x){
for(i in 1:length(x)){
if(!is.na(x[i])){
z <- (x[i])
z<- vector("numeric",length(x))
print (z)
}
}
}
a <- c(1, 4, 7, NA, 10)
remove_missing(a) # how to make answer as a vector
remove_missing <- function(x){
for(i in 1:length(x)){
if(!is.na(x[i])){
z <- (x[i])
b<- vector("numeric",length(x))
print (b)
}
}
}
a <- c(1, 4, 7, NA, 10)
remove_missing(a) # how to make answer as a vector
remove_missing <- function(x){
for(i in 1:length(x)){
if(!is.na(x[i])){
z <- (x[i])
}
}
print (z)
}
a <- c(1, 4, 7, NA, 10)
remove_missing(a) # how to make answer as a vector
# Function remove_missing()
remove_missing <- function(x){
for(i in 1:length(x)){
if(!is.na(x[i])){
z[i] <- (x[i])
}
}
print (z)
}
a <- c(1, 4, 7, NA, 10)
remove_missing(a) # how to make answer as a vector
remove_missing <- function(x){
for(i in 1:length(x)){
if(!is.na(x[i])){
z <- vector("numeric", length(x))
z[i] <- (x[i])
}
}
print (z)
}
a <- c(1, 4, 7, NA, 10)
remove_missing(a) # how to make answer as a vector
# Function remove_missing()
remove_missing <- function(x){
for(i in 1:length(x)){
if(!is.na(x[i])){
z <- vector("numeric", length(x))
z[i] <- (x[i])
}
}
print (z[i])
}
a <- c(1, 4, 7, NA, 10)
remove_missing(a) # how to make answer as a vector
# Function remove_missing()
remove_missing <- function(x){
for(i in 1:length(x)){
if(!is.na(x[i])){
z <- vector("numeric", length(x))
z[i] <- (x[i])
}
}
print (z)
}
a <- c(1, 4, 7, NA, 10)
remove_missing(a) # how to make answer as a vector
# Function remove_missing()
remove_missing <- function(x){
for(i in 1:length(x)){
if(!is.na(x[i])){
print (x[i])
}
}
}
a <- c(1, 4, 7, NA, 10)
remove_missing(a) # how to make answer as a vector
get_minimum <- function(x, na.rm = FALSE) {
if (!is.numeric(x)) {
stop("non-numeric argument")
}
sortX <- sort(x,na.rm = na.rm)
return(sortX[1])
}
a <- c(1, 4, 7, NA, 10)
get_minimum(a, na.rm = TRUE)
download.file(https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2017/master/data/rawscores.csv)
download.file("https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2017/master/data/rawscores.csv")
download.file(https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2017/master/data/rawscores.csv)
download.file(https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2017/master/data/rawscores.csv)
# test script
library(testthat)
# source in functions to be tested
source( functions.R )
sink( ../output/test-reporter.txt )
test_file( tests.R )
sink()
download.file(https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2017/master/data/rawscores.csv)
getwd()
shiny::runApp('stat133/stat133-hws-fall17/hw04/app/gradevis')
shiny::runApp()
install.packages("ggvis")
install.packages("ggvis")
install.packages("ggvis")
install.packages("ggvis")
shiny::runApp()
runApp()
runApp()
dat <- read.csv('../data/cleandata/cleanscores.csv', header=TRUE)
getwd
getwd()
dat <- read.csv('../../data/cleanscores.csv', header=TRUE)
dat <- read.csv('/Users/jieunhwang/stat133/stat133-hws-fall17/hw04/data/cleandata/cleanscores.csv', header= TRUE)
source('/Users/jieunhwang/stat133/stat133-hws-fall17/hw04/code/functions.R')
source('functions.R')
rawscores <- read.csv('../data/rawdata/rawscores.csv', header=TRUE)
sink(file = '../output/summary-rawscores.txt')
str(rawscores, vec.len = 1)
for(i in 1:ncol(rawscores)){
summary_stats(rawscores[,i]) # error(no print)
print_stats(rawscores[,i])
}
sink()
source('functions.R')
rawscores <- read.csv('../data/rawdata/rawscores.csv', header=TRUE)
sink(file = '../output/summary-rawscores.txt')
str(rawscores, vec.len = 1)
for(i in 1:ncol(rawscores)){
summary_stats(rawscores[,i]) # error(no print)
print_stats(rawscores[,i])
}
sink()
source('functions.R')
rawscores <- read.csv('../data/rawdata/rawscores.csv', header=TRUE)
source('functions.R')
rawscores <- read.csv('../data/rawdata/rawscores.csv', header=TRUE)
sink(file = '../output/summary-rawscores.txt')
str(rawscores, vec.len = 1)
for(i in 1:ncol(rawscores)){
summary_stats(rawscores[,i]) # error(no print)
print_stats(rawscores[,i])
}
sink()
source('functions.R')
rawscores <- read.csv('../data/rawdata/rawscores.csv', header=TRUE)
getwd
getwd()
source('/Users/jieunhwang/stat133/stat133-hws-fall17/hw04/code/functions.R')
dat <- read.csv('/Users/jieunhwang/stat133/stat133-hws-fall17/hw04/data/cleandata/cleanscores.csv', header= TRUE)
View(dat)
shiny::runApp()
runApp()
dat$Grade <- as.factor(dat$Grade)
categorical <- c('A+','A','A-','B+','B','B-','C+','C','C-','D','F')
assignment <- c('HW1','HW2','HW3','HW4','HW5','HW6','HW7','HW8','HW9')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
table(dat$Grade)
dat$Grade
data$Grade <- factor(dat$Grade, levels = c('A+','A','A-','B+','B','B-','C+','C','C-','D','F'))
data$Grade <- factor(dat$Grade, levels = c("A+","A","A-","B+","B","B-","C+","C","C-","D","F"))
dat$Grade <- factor(dat$Grade, levels = c('A+','A','A-','B+','B','B-','C+','C','C-','D','F'))
View(data)
table(dat$Grade)
prop.table(dat$Grade)
prop.table(table(dat$Grade))
round(prop.table(table(dat$Grade)),2)
Freq <- table(dat$Grade)
Prop <- round(prop.table(Freq),2)
Freq
Prop
Prop[1]
Prop[[1]]
grade <- data.frame()
is.list(Freq)
is.dataframe(Freq)
is.data.frame(Freq)
table(dat$Grade)
levels(table(dat$Grade))
level(table(dat$Grade))
names = table(dat$Grade)
names(table(dat$Grade))
Freq[1:11]
Freq[[1:11]]
table(dat$Grade,names = False)
table(dat$Grade,names = FALSE)
table(dat$Grade, names = FALSE)
names(table(dat$Grade),FALSE)
table(Freq)
Freq
Freq[TRUE]
Freq["TRUE"]
table(dat$Grade)["TRUE"]
table(dat$Grade)["FALSE"]
Freq
Freq[1:11]
Freq[1:11]["TRUE"]
Freq[[1:11]]
Freq[1:11,names=FALSE]
grade<- data.frame(Grade = names(table(dat$Grade)))
View(grade)
grade<- data.frame(Grade = names(table(dat$Grade)), Freq = Freq)
grade<- data.frame(Grade = names(table(dat$Grade)), Freq = Freq, Prop = Prop)
v<- as.vector(Freq)
v
Freq <- as.vector(table(dat$Grade))
Prop <- as.vector(round(prop.table(Freq),2))
grade <- data.frame(dat$Grade,
Grade = names(table(dat$Grade)),
Freq = Freq,
Prop = Prop
)
prop.table(dat$Grade)
Freq <- table(dat$Grade)
Prop <- as.vector(round(prop.table(Freq),2))
grade <- data.frame(dat$Grade,
Grade = names(table(dat$Grade)),
Freq = Freq,
Prop = Prop
)
grade <- data.frame(
Grade = names(table(dat$Grade)),
Freq = Freq,
Prop = Prop
)
Freq <- as.vector(table(dat$Grade))
Prop <- as.vector(round(prop.table(Freq),2))
grade <- data.frame(
Grade = names(table(dat$Grade)),
Freq = Freq,
Prop = Prop
)
grade <- data.frame(
Grade = names(table(dat$Grade)),
Freq = Freq,
Prop = Prop
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
grade
grade[1:11]
grade[,1:11]
grade[,1]
runApp()
levels(grade_freq)
grade_freq <- table(dat$Grade)
levels(grade_freq)
library(DT)
install.packages(DT)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat[,1]
dat[,1:13]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(summary_stats)
View(summary_stats)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?tableOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(list=ls())
source('../../code/functions.R')
dat <- read.csv('../../data/cleandata/cleanscores.csv', header= TRUE)
rm(list=ls())
shiny::runApp()
rm(list=ls())
runApp()
runApp()
runApp()
dat <- read.csv('/Users/jieunhwang/stat133/stat133-hws-fall17/hw04/data/cleandata/cleanscores.csv', header= TRUE)
runApp()
dat$Grade <- as.factor(dat$Grade)
dat$Grade <- factor(dat$Grade, levels = c('A+','A','A-','B+','B','B-','C+','C','C-','D','F'))
freq <- as.vector(table(dat$Grade))
prop <- as.vector(round(prop.table(Freq),2))
grade <- data.frame(
Grade = names(table(dat$Grade)),
Freq = freq,
Prop = prop
)
rm(list=ls())
runApp()
rm(list=ls())
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(list=ls())
shiny::runApp()
rm(list=ls())
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- c(1,2,NA,NA)
get_range(a'')
get_range(a)
c <- c(1, 3, 4, 5, NA, NA)
d <- c(5, NA)
get_minimum(c)
get_minimum(c, na.rm = TRUE)
get_minimum(D, na.rm = TRUE)
get_minimum(d, na.rm = TRUE)
a <- c(1, 4, 7, NA, 10)
get_maximum(a, na.rm = FALSE)
get_maximum(a, na.rm = TRUE)
get_minimum(a, na.rm = TRUE)
expect_equal(get_quartile1(b, na.rm = FALSE), 2)
library(testthat)
# test script
library(testthat)
# source in functions to be tested
source('functions.R')
sink('../output/test-reporter.txt' )
test_file( 'tests.R' )
sink()
# test script
library(testthat)
# source in functions to be tested
source('functions.R')
sink('../output/test-reporter.txt' )
test_file( 'tests.R' )
sink()
setwd()
getwd()
shiny::runApp()
runApp()
