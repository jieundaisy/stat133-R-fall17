for(i in l:length(x)){
h <- as.numeric(str_replace(x, pattern = 'AM|PM', replacement = ''))
p <- str_sub(x, start = -2)
if(h[i]<12 & p[i] == "PM"){
start24[i] <- h[i]+12
}
}
# your vector start24
start24 <- c()
for(i in 1:length(x)){
h <- as.numeric(str_replace(x, pattern = 'AM|PM', replacement = ''))
p <- str_sub(x, start = -2)
if(h[i]<12 & p[i] == "PM"){
start24[i] <- h[i]+12
}
}
# your vector start24
start24 <- c()
for(i in 1:length(x)){
h <- as.numeric(str_replace(x, pattern = 'AM|PM', replacement = ''))
p <- str_sub(x, start = -2)
if(h[i]<12 & p[i] == "PM"){
start24[i] <- h[i]+12
}
}
# your vector start24
start24 <- c()
function<- (x){
# your vector start24
start24 <- c()
make24<- function(x){
for(i in 1:length(x)){
h <- as.numeric(str_replace(x, pattern = 'AM|PM', replacement = ''))
p <- str_sub(x, start = -2)
if(h[i]<12 & p[i] == "PM"){
start24[i] <- h[i]+12
}
}
}
a <- ("9PM","8AM")
a <- c("9PM","8AM")
make24(a)
# your vector start24
start24 <- c()
make24<- function(x){
for(i in 1:length(x)){
h <- as.numeric(str_replace(x, pattern = 'AM|PM', replacement = ''))
p <- str_sub(x, start = -2)
if(h[i]<12 & p[i] == "PM"){
start24[i] <- h[i]+12
}
}
print (start24)
}
a
make24(a)
# your vector start24
start24 <- c()
make24<- function(x){
for(i in 1:length(x)){
h <- as.numeric(str_replace(x, pattern = 'AM|PM', replacement = ''))
p <- str_sub(x, start = -2)
if(h[i]<12 & p[i] == "PM"){
start24[i] <- h[i]+12
}
start24[i] <- h[i]
}
print (start24)
}
make24(a)
# your vector start24
start24 <- c()
make24<- function(x){
for(i in 1:length(x)){
h <- as.numeric(str_replace(x, pattern = 'AM|PM', replacement = ''))
p <- str_sub(x, start = -2)
if(h[i]<12 & p[i] == "PM"){
start24[i] <- h[i]+12
}else{
start24[i] <- h[i]
}
}
print (start24)
}
make24(a)
# your vector start24
start24 <- c()
make24<- function(x){
for(i in 1:length(x)){
h <- as.numeric(str_replace(x, pattern = 'AM|PM', replacement = ''))
p <- str_sub(x, start = -2)
if(h[i]<12 & p[i] == "PM"){
start24[i] <- h[i]+12+"PM"
}else{
start24[i] <- h[i]+"AM"
}
}
print (start24)
}
make24(a)
# your vector start24
start24 <- c()
make24<- function(x){
for(i in 1:length(x)){
h <- as.numeric(str_replace(x, pattern = 'AM|PM', replacement = ''))
p <- str_sub(x, start = -2)
if(h[i]<12 & p[i] == "PM"){
start24[i] <- h[i]+12+
}else{
# your vector start24
start24 <- c()
make24<- function(x){
for(i in 1:length(x)){
h <- as.numeric(str_replace(x, pattern = 'AM|PM', replacement = ''))
p <- str_sub(x, start = -2)
if(h[i]<12 & p[i] == "PM"){
start24[i] <- h[i]+12
}else{
start24[i] <- h[i]
}
}
start24 <- c(start24,p)
}
a
make24(A)
make24(A)
make24(a)
# your vector start24
start24 <- c()
make24<- function(x){
for(i in 1:length(x)){
h <- as.numeric(str_replace(x, pattern = 'AM|PM', replacement = ''))
p <- str_sub(x, start = -2)
if(h[i]<12 & p[i] == "PM"){
start24[i] <- h[i]+12
}else{
start24[i] <- h[i]
}
}
start24 <- c(start24,p)
print(start24)
}
make24(a)
# your vector start24
start24 <- c()
make24<- function(x){
for(i in 1:length(x)){
h <- as.numeric(str_replace(x, pattern = 'AM|PM', replacement = ''))
p <- str_sub(x, start = -2)
if(h[i]<12 & p[i] == "PM"){
start24[i] <- h[i]+12
}else{
start24[i] <- h[i]
}
print(start24)
}
# your vector start24
start24 <- c()
make24<- function(x){
for(i in 1:length(x)){
h <- as.numeric(str_replace(x, pattern = 'AM|PM', replacement = ''))
p <- str_sub(x, start = -2)
if(h[i]<12 & p[i] == "PM"){
start24[i] <- h[i]+12
}else{
start24[i] <- h[i]
}
print(start24)
}
}
# your vector start24
v <- c()
start24<- function(x){
for(i in 1:length(x)){
h <- as.numeric(str_replace(x, pattern = 'AM|PM', replacement = ''))
p <- str_sub(x, start = -2)
if(h[i]<12 & p[i] == "PM"){
v[i] <- h[i]+12
}else{
v[i] <- h[i]
}
print(v)
}
}
View(dat)
loc1 <- "(37.7651967350509,-122.416451692902)"
loc1 <- "(37.7651967350509,-122.416451692902)"
# "remove" opening parenthesis
str_replace(loc1, pattern = '\\(', replacement = '')
loc1 <- "(37.7651967350509,-122.416451692902)"
# "remove" opening parenthesis
str_replace(loc1, pattern = '\\(', replacement = '')
# "remove" closing parenthesis
str_replace(loc1, pattern = '\\)', replacement = '')
loc1 <- "(37.7651967350509,-122.416451692902)"
# "remove" opening parenthesis
str_replace(loc1, pattern = '\\(', replacement = '')
# "remove" closing parenthesis
str_replace(loc1, pattern = '\\)', replacement = '')
str_replace(loc1, pattern = '\\(|\\)', replacement = '')
loc1 <- "(37.7651967350509,-122.416451692902)"
# "remove" opening parenthesis
str_replace(loc1, pattern = '\\(', replacement = '')
# "remove" closing parenthesis
str_replace(loc1, pattern = '\\)', replacement = '')
str_replace(loc1, pattern = '\\(|\\)', replacement = '')
str_replace_all(loc1, pattern = '\\(|\\)', replacement = '')
# your vector start24
v <- c()
start24<- function(x){
for(i in 1:length(x)){
h <- as.numeric(str_replace(x, pattern = 'AM|PM', replacement = ''))
p <- str_sub(x, start = -2)
if(h[i]<12 & p[i] == "PM"){
v[i] <- h[i]+12
}else{
v[i] <- h[i]
}
print(v)
}
}
loc1 <- "(37.7651967350509,-122.416451692902)"
# "remove" opening parenthesis
str_replace(loc1, pattern = '\\(', replacement = '')
# "remove" closing parenthesis
str_replace(loc1, pattern = '\\)', replacement = '')
str_replace(loc1, pattern = '\\(|\\)', replacement = '')
str_replace_all(loc1, pattern = '\\(|\\)', replacement = '')
lat_lon <- str_replace_all(loc1, pattern = '\\(|\\)', replacement = '')
str_replace(lat_lon, pattern = ',', replacement = '')
# string split in stringr
str_split(lat_lon, pattern = ',')
locs <- c(
"(37.7651967350509,-122.416451692902)",
"(37.7907890558203,-122.402273431333)",
"(37.7111991003088,-122.394693339395)",
"(37.7773000262759,-122.394812784799)",
NA
)
# your vector start24
v <- c()
start24<- function(x){
for(i in 1:length(x)){
h <- as.numeric(str_replace(x, pattern = 'AM|PM', replacement = ''))
p <- str_sub(x, start = -2)
if(h[i]<12 & p[i] == "PM"){
v[i] <- h[i]+12
}else{
v[i] <- h[i]
}
print(v)
}
}
paste(c(v,p))
# your vector start24
v <- c()
start24<- function(x){
for(i in 1:length(x)){
h <- as.numeric(str_replace(x, pattern = 'AM|PM', replacement = ''))
p <- str_sub(x, start = -2)
if(h[i]<12 & p[i] == "PM"){
v[i] <- h[i]+12
}else{
v[i] <- h[i]
}
print(v)
}
}
paste(c(v,p))
# your vector start24
v <- c()
start24<- function(x){
for(i in 1:length(x)){
h <- as.numeric(str_replace(x, pattern = 'AM|PM', replacement = ''))
p <- str_sub(x, start = -2)
if(h[i]<12 & p[i] == "PM"){
v[i] <- h[i]+12
}else{
v[i] <- h[i]
}
print(v)
}
}
loc1 <- "(37.7651967350509,-122.416451692902)"
# "remove" opening parenthesis
str_replace(loc1, pattern = '\\(', replacement = '')
# "remove" closing parenthesis
str_replace(loc1, pattern = '\\)', replacement = '')
str_replace(loc1, pattern = '\\(|\\)', replacement = '')
str_replace_all(loc1, pattern = '\\(|\\)', replacement = '')
lat_lon <- str_replace_all(loc1, pattern = '\\(|\\)', replacement = '')
str_replace(lat_lon, pattern = ',', replacement = '')
# string split in stringr
str_split(lat_lon, pattern = ',')
locs <- c(
"(37.7651967350509,-122.416451692902)",
"(37.7907890558203,-122.402273431333)",
"(37.7111991003088,-122.394693339395)",
"(37.7773000262759,-122.394812784799)",
NA
)
lat <- lapply(lat_lon, function(x) x[1])
locs <- c(
"(37.7651967350509,-122.416451692902)",
"(37.7907890558203,-122.402273431333)",
"(37.7111991003088,-122.394693339395)",
"(37.7773000262759,-122.394812784799)",
NA
)
lat <- lapply(lat_lon, function(x) x[1])
latitute <- as.numeric(unlist(lat))
longitude <- as.numeric(unlist(lon))
locs <- c(
"(37.7651967350509,-122.416451692902)",
"(37.7907890558203,-122.402273431333)",
"(37.7111991003088,-122.394693339395)",
"(37.7773000262759,-122.394812784799)",
NA
)
lat <- lapply(lat_lon, function(x) x[1])
lon <- lapply(lat_lon, function(x) x[2])
latitute <- as.numeric(unlist(lat))
longitude <- as.numeric(unlist(lon))
locs <- c(
"(37.7651967350509,-122.416451692902)",
"(37.7907890558203,-122.402273431333)",
"(37.7111991003088,-122.394693339395)",
"(37.7773000262759,-122.394812784799)",
NA
)
lat <- lapply(lat_lon, function(x) x[1])
lon <- lapply(lat_lon, function(x) x[2])
latitute <- as.numeric(unlist(lat))
longitude <- as.numeric(unlist(lon))
plot(dat$lon, dat$lat, pch = 19, col = "#77777744")
locs <- c(
"(37.7651967350509,-122.416451692902)",
"(37.7907890558203,-122.402273431333)",
"(37.7111991003088,-122.394693339395)",
"(37.7773000262759,-122.394812784799)",
NA
)
lat <- lapply(lat_lon, function(x) x[1])
lon <- lapply(lat_lon, function(x) x[2])
latitute <- as.numeric(unlist(lat))
longitude <- as.numeric(unlist(lon))
library(RgoogleMaps)
install.packages("RgoogleMaps")
library(RgoogleMaps)
# coordinates for center of the map
center <- c(mean(dat$lat, na.rm = TRUE), mean(dat$lon, na.rm = TRUE))
# zoom value
zoom <- min(MaxZoom(range(dat$lat, na.rm = TRUE),
range(dat$lon, na.rm = TRUE)))
# san francisco map
map1 <- GetMap(center=center, zoom=zoom, destfile = "san-francisco.png")
# coordinates for center of the map
center <- c(mean(dat$lat, na.rm = TRUE), mean(dat$lon, na.rm = TRUE))
# zoom value
zoom <- min(MaxZoom(range(dat$lat, na.rm = TRUE),
range(dat$lon, na.rm = TRUE)))
# san francisco map
map1 <- GetMap(center=center, zoom=zoom, destfile = "san-francisco.png")
PlotOnStaticMap(map1, dat$lat, dat$lon, col = "#ed4964", pch=20)
install.packages("ggmap")
dat$optionaltext[1:3]
dat$optionaltext[1:3]
foods <- dat$optionaltext[1:10]
dat$optionaltext[1:3]
foods <- dat$optionaltext[1:10]
# vector of strings
animals <- c('dog', 'cat', 'bird', 'dolphin', 'lion',
'zebra', 'tiger', 'wolf', 'whale', 'eagle',
'pig', 'osprey', 'kangaroo', 'koala')
dat$optionaltext[1:3]
foods <- dat$optionaltext[1:10]
# vector of strings
animals <- c('dog', 'cat', 'bird', 'dolphin', 'lion',
'zebra', 'tiger', 'wolf', 'whale', 'eagle',
'pig', 'osprey', 'kangaroo', 'koala')
grep('dog', animals)
dat$optionaltext[1:3]
foods <- dat$optionaltext[1:10]
# vector of strings
animals <- c('dog', 'cat', 'bird', 'dolphin', 'lion',
'zebra', 'tiger', 'wolf', 'whale', 'eagle',
'pig', 'osprey', 'kangaroo', 'koala')
grep('dog', animals)
grep('dog', animals, value = TRUE)
dat$optionaltext[1:3]
foods <- dat$optionaltext[1:10]
# vector of strings
animals <- c('dog', 'cat', 'bird', 'dolphin', 'lion',
'zebra', 'tiger', 'wolf', 'whale', 'eagle',
'pig', 'osprey', 'kangaroo', 'koala')
grep('dog', animals)
grep('dog', animals, value = TRUE)
str_detect(animals, 'dog')
str_extract(animals, 'dog')
animals[str_detect(animals, 'dog')]
source('functions.R')
# read in the CSV file with the raw scores
rawscores <- read.csv('../data/rawdata/rawscores.csv', header=TRUE)
# use sink()
sink(file = '../output/summary-rawscores.txt')
str(rawscores, vec.len = 1)
for(i in 1:ncol(rawscores)){
print_stats(rawscores[,i])
}
sink()
# for loop, traversing the columns of the data frame, to replace all missing values NA with zero.
for(i in 1:ncol(rawscores)){
rawscores[,i][is.na(rawscores[,i])] <- 0
}
# rescale100() to rescale QZ1: 0 is the minimum, and 12 is the max.
rawscores$QZ1 <- rescale100(rawscores$QZ1,xmin=0, xmax=12)
# rescale100() to rescale QZ2: 0 is the minimum, and 18 is the max.
rawscores$QZ2 <- rescale100(rawscores$QZ2,xmin=0, xmax=18)
# rescale100() to rescale QZ3: 0 is the minimum, and 20 is the max.
rawscores$QZ3 <- rescale100(rawscores$QZ3,xmin=0, xmax=20)
# rescale100() to rescale QZ4: 0 is the minimum, and 20 is the max.
rawscores$QZ4 <- rescale100(rawscores$QZ4,xmin=0, xmax=20)
# rescale100() to add a variable Test1 by rescaling EX1 (0 is the minimum, and 80 is the max)
Test1 <- rescale100(rawscores$EX1,xmin=0, xmax=80)
rawscores <- cbind(rawscores,Test1)
# rescale100() to add a variable Test2 by rescaling EX2 (0 is the minimum, and 90 is the max)
Test2 <- rescale100(rawscores$EX2,xmin=0, xmax=90)
rawscores<- cbind(rawscores, Test2)
# Homework(drop the lowest score and then averaging)
Homework <- c()
for(i in 1:nrow(rawscores)){
newhw<- drop_lowest(as.numeric(rawscores[i,1:9]))
Homework[i] <- get_average(newhw)
}
rawscores <- cbind(rawscores,Homework)
# Quiz (drop the lowest score and then averaging)
Quiz <- c()
for(i in 1:nrow(rawscores)){
newquiz<- drop_lowest(as.numeric(rawscores[i,11:14]))
Quiz[i]<- get_average(newquiz)
}
rawscores<- cbind(rawscores,Quiz)
# Overall
lab <- c()
hw <- c()
quiz <- c()
test1 <- c()
test2 <- c()
total <- c()
for(i in 1:nrow(rawscores)){
lab[i] <- score_lab(rawscores$ATT[i])*0.1
hw[i] <- (rawscores$Homework[i])*0.3
quiz[i] <- (rawscores$Quiz[i])*0.15
test1[i] <- (rawscores$Test1[i])*0.2
test2[i] <- (rawscores$Test2[i])*0.25
total[i] <- sum(lab[i], hw[i], quiz[i], test1[i], test2[i])
}
Overall <- total
rawscores <- cbind (rawscores,lab)
rawscores <- cbind(rawscores, Overall)
# letter Grade
Grade <- c()
for(i in 1:334){
if(rawscores$Overall[i]>= 95 & rawscores$Overall[i]<=100 ){
Grade[i] <- "A+"
}else if (rawscores$Overall[i]>=90 & rawscores$Overall[i]<95){
Grade[i] <- "A"
}else if (rawscores$Overall[i]>=88 & rawscores$Overall[i]<90){
Grade[i] <- "A-"
}else if (rawscores$Overall[i]>=86 & rawscores$Overall[i]<88){
Grade[i] <- "B+"
}else if (rawscores$Overall[i]>=82 & rawscores$Overall[i]<86){
Grade[i] <- "B"
}else if (rawscores$Overall[i]>=79.5 & rawscores$Overall[i]<82){
Grade[i] <- "B-"
}else if (rawscores$Overall[i]>=77.5 & rawscores$Overall[i]<79.5){
Grade[i] <- "C+"
}else if (rawscores$Overall[i]>=70 & rawscores$Overall[i]<77.5){
Grade[i] <- "C"
}else if (rawscores$Overall[i]>=60 & rawscores$Overall[i]<70){
Grade[i] <- "C-"
}else if (rawscores$Overall[i]>=50 & rawscores$Overall[i]<60){
Grade[i] <- "D"
}else{
Grade[i] <- "F"
}
}
rawscores <- cbind(rawscores, Grade)
# sink ()
sink(file = '../output/Lab-stats.txt')
print_stats(lab)
sink()
sink(file = '../output/Homework-stats.txt')
print_stats(hw)
sink()
sink(file = '../output/Quiz-stats.txt')
print_stats(quiz)
sink()
sink(file = '../output/Test1-stats.txt')
print_stats(test1)
sink()
sink(file = '../output/Test2-stats.txt')
print_stats(test2)
sink()
sink(file = '../output/Overall-stats.txt')
print_stats(Overall)
sink()
sink(file = '../output/summary-cleanscores.txt')
str(rawscores, vec.len = 1)
sink()
# export the clean data frame of scores to a CSV file
write.csv(rawscores,"../data/cleandata/cleanscores.csv",row.names = FALSE)
